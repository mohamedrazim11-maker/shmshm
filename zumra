// Candidate Registration
void registerCandidate() {
    Candidate newCandidate;
    printf(CYAN "\n------ 🧾 CANDIDATE REGISTRATION ------\n\n" RESET);

    printf("👤 Enter your username: ");
    scanf("%s", newCandidate.username);

    printf("🧍 Enter your name: ");
    scanf("%s", newCandidate.name);

    printf("🔢 Enter your candidate number: ");
    scanf("%d", &newCandidate.candidate_no);

    // Check for duplicate candidate number
    Candidate *allParties[] = {partyA, partyB, partyC, partyD, partyE};
    for (int p = 0; p < 5; p++) {
        for (int i = 0; i < MAX_CANDIDATES; i++) {
            if (allParties[p][i].registered && allParties[p][i].candidate_no == newCandidate.candidate_no) {
                printf(RED "❌ Candidate number already taken. Registration failed.\n" RESET);
                return;
            }
        }
    }

    printf("🏳️ Choose your party (A, B, C, D, E): ");
    scanf(" %c", &newCandidate.party);

    newCandidate.votes = 0;
    newCandidate.registered = 1;

    Candidate *partyList = NULL;
    switch (toupper(newCandidate.party)) {
        case 'A': partyList = partyA; break;
        case 'B': partyList = partyB; break;
        case 'C': partyList = partyC; break;
        case 'D': partyList = partyD; break;
        case 'E': partyList = partyE; break;
        default:
            printf(RED "❌ Invalid party selection.\n" RESET);
            return;
    }

    for (int i = 0; i < MAX_CANDIDATES; i++) {
        if (!partyList[i].registered) {
            partyList[i] = newCandidate;
            printf(GREEN "\n✅ You are successfully registered as candidate number %02d for Party %c.\n" RESET,
                   newCandidate.candidate_no, toupper(newCandidate.party));
            return;
        }
    }

    printf(RED "\n❌ Registration failed. Max candidates reached for Party %c.\n" RESET, toupper(newCandidate.party));
}

// Utility function to validate NIC
int isValidNIC(char *nic) {
    if (strlen(nic) != 12) {
        return 0;
    }
    for (int i = 0; i < 12; i++) {
        if (!isdigit(nic[i])) {
            return 0;
        }
    }
    return 1;
}