#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

// ANSI color codes
#define RESET       "\033[0m"
#define RED         "\033[1;31m"
#define GREEN       "\033[1;32m"
#define YELLOW      "\033[1;33m"
#define CYAN        "\033[1;36m"

// Constants
#define MAX_CANDIDATES 5
#define MAX_VOTERS 1000
#define PASSWORD "official@1234"

// Candidate structure
typedef struct {
    char username[50];
    char name[50];
    int candidate_no;
    char party;
    int votes;
    int registered;
} Candidate;

// Global arrays for each party
Candidate partyA[MAX_CANDIDATES] = {0};
Candidate partyB[MAX_CANDIDATES] = {0};
Candidate partyC[MAX_CANDIDATES] = {0};
Candidate partyD[MAX_CANDIDATES] = {0};
Candidate partyE[MAX_CANDIDATES] = {0};

// Array to track voters' NICs
char registeredNICs[MAX_VOTERS][20];
int totalNICs = 0;

// Function declarations
void vote();
void registerCandidate();
void viewOfficials();
int isValidNIC(char *nic);

int main() {
    int choice;

    while (1) {
        printf(CYAN "\n--------------------------------------------------\n" RESET);
        printf(YELLOW "      üéâ Welcome to the Election Voting System üéâ   \n" RESET);
        printf(CYAN "--------------------------------------------------\n" RESET);
        printf(GREEN "1Ô∏è‚É£  Vote\n" RESET);
        printf(GREEN "2Ô∏è‚É£  Candidate Register\n" RESET);
        printf(GREEN "3Ô∏è‚É£  Officials View\n" RESET);
        printf(RED   "4Ô∏è‚É£  Exit\n" RESET);
        printf(CYAN "--------------------------------------------------\n" RESET);
        printf("üëâ Enter your choice (1-4): ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                vote();
                break;
            case 2:
                registerCandidate();
                break;
            case 3:
                viewOfficials();
                break;
            case 4:
                printf(YELLOW "üëã Exiting... Thank you for participating!\n" RESET);
                return 0;
            default:
                printf(RED "‚ùå Invalid choice. Please try again.\n" RESET);
        }
    }

    return 0;
}
// Candidate Registration
void registerCandidate() {
    Candidate newCandidate;
    printf(CYAN "\n------ üßæ CANDIDATE REGISTRATION ------\n\n" RESET);

    printf("üë§ Enter your username: ");
    scanf("%s", newCandidate.username);

    printf("üßç Enter your name: ");
    scanf("%s", newCandidate.name);

    printf("üî¢ Enter your candidate number: ");
    scanf("%d", &newCandidate.candidate_no);

    // Check for duplicate candidate number
    Candidate *allParties[] = {partyA, partyB, partyC, partyD, partyE};
    for (int p = 0; p < 5; p++) {
        for (int i = 0; i < MAX_CANDIDATES; i++) {
            if (allParties[p][i].registered && allParties[p][i].candidate_no == newCandidate.candidate_no) {
                printf(RED "‚ùå Candidate number already taken. Registration failed.\n" RESET);
                return;
            }
        }
    }

    printf("üè≥Ô∏è Choose your party (A, B, C, D, E): ");
    scanf(" %c", &newCandidate.party);

    newCandidate.votes = 0;
    newCandidate.registered = 1;

    Candidate *partyList = NULL;
    switch (toupper(newCandidate.party)) {
        case 'A': partyList = partyA; break;
        case 'B': partyList = partyB; break;
        case 'C': partyList = partyC; break;
        case 'D': partyList = partyD; break;
        case 'E': partyList = partyE; break;
        default:
            printf(RED "‚ùå Invalid party selection.\n" RESET);
            return;
    }

    for (int i = 0; i < MAX_CANDIDATES; i++) {
        if (!partyList[i].registered) {
            partyList[i] = newCandidate;
            printf(GREEN "\n‚úÖ You are successfully registered as candidate number %02d for Party %c.\n" RESET,
                   newCandidate.candidate_no, toupper(newCandidate.party));
            return;
        }
    }

    printf(RED "\n‚ùå Registration failed. Max candidates reached for Party %c.\n" RESET, toupper(newCandidate.party));
}

// Utility function to validate NIC
int isValidNIC(char *nic) {
    if (strlen(nic) != 12) {
        return 0;
    }
    for (int i = 0; i < 12; i++) {
        if (!isdigit(nic[i])) {
            return 0;
        }
    }
    return 1;
}
// Officials View
void viewOfficials() {
    char password[50];

    printf(CYAN "\n------ üõ°Ô∏è OFFICIAL VIEW üõ°Ô∏è ------\n" RESET);
    printf("üîê Enter your password: ");
    scanf("%s", password);

    if (strcmp(password, PASSWORD) != 0) {
        printf(RED "‚ùå Incorrect password. Access denied.\n" RESET);
        return;
    }

    printf(YELLOW "\n------ üó≥Ô∏è MATARA DISTRICT VOTE COUNTS üó≥Ô∏è ------\n\n" RESET);

    Candidate *parties[] = {partyA, partyB, partyC, partyD, partyE};
    char partyLabels[] = {'A', 'B', 'C', 'D', 'E'};

    for (int p = 0; p < 5; p++) {
        printf(CYAN "  Party %c   Candidate_No  Votes\n\n" RESET, partyLabels[p]);
        for (int i = 0; i < MAX_CANDIDATES; i++) {
            if (parties[p][i].registered) {
                printf(GREEN "%dÔ∏è‚É£  %s \t%02d         %02d\n" RESET, i + 1,
                    parties[p][i].name,
                    parties[p][i].candidate_no,
                    parties[p][i].votes);
            } else {
                printf("%dÔ∏è‚É£  [Empty] \t00         00\n", i + 1);
            }
        }
        printf("\n");
    }
}   
// Voting
void vote() {
    int age;
    char nic[20];
    int candidate_no;
    int found = 0;

    printf(CYAN "\n------ üó≥Ô∏è VOTING SECTION üó≥Ô∏è ------\n\n" RESET);
    printf("üéÇ Enter your age (only eligible if 18 or above): ");
    scanf("%d", &age);

    if (age < 18) {
        printf(RED "‚ùå You are not eligible to vote.\n" RESET);
        return;
    }

    printf("üÜî Enter your 12-digit NIC no: ");
    scanf("%s", nic);

    if (!isValidNIC(nic)) {
        printf(RED "‚ùå Invalid NIC. NIC must be exactly 12 digits and numeric only.\n" RESET);
        return;
    }

    for (int i = 0; i < totalNICs; i++) {
        if (strcmp(registeredNICs[i], nic) == 0) {
            printf(RED "üö´ You have already voted. Duplicate voting is not allowed.\n" RESET);
            return;
        }
    }

    printf(YELLOW "\n------- üìÑ BALLOT PAPER üìÑ -------\n\n" RESET);

    Candidate *parties[] = {partyA, partyB, partyC, partyD, partyE};
    char partyLabels[] = {'A', 'B', 'C', 'D', 'E'};

    for (int p = 0; p < 5; p++) {
        printf(CYAN "  Party %c   Candidate No\n" RESET, partyLabels[p]);
        for (int i = 0; i < MAX_CANDIDATES; i++) {
            if (parties[p][i].registered) {
                printf("   %dÔ∏è‚É£  %s \t%02d\n", i + 1,
                    parties[p][i].name,
                    parties[p][i].candidate_no);
            } else {
                printf("   %dÔ∏è‚É£  [Slot Empty] \t00\n", i + 1);
            }
        }
        printf("\n");
    }

    printf("üó≥Ô∏è Choose your candidate using their candidate number (2-digit): ");
    scanf("%d", &candidate_no);

    for (int p = 0; p < 5 && !found; p++) {
        for (int i = 0; i < MAX_CANDIDATES; i++) {
            if (parties[p][i].registered && parties[p][i].candidate_no == candidate_no) {
                parties[p][i].votes++;
                found = 1;
                strcpy(registeredNICs[totalNICs++], nic);
                break;
            }
        }
    }

    if (found)
        printf(GREEN "‚úÖ Your vote has been accepted. Thank you for voting!\n" RESET);
    else
        printf(RED "‚ùå Invalid candidate number. Vote not counted.\n" RESET);
}